<link rel="stylesheet" href="/css/mytable/table.css">

<div class="table-wrapper flex flex-col justify-center items-center px-3 bg-white">
    <section class="table__header mt-5">
        <div class="px-1">
            <div class="flex justify-between items-center">
                <div id="dtBasicExample_filter" class="dataTables_filter">
                    <input id="search-user" type="search"
                        class="border-r-0 rounded-l-md px-4 py-[8px] outline-none min-w-[400px] text-sm border-2 border-gray-300 focus:border-cyan-300"
                        placeholder="Tìm kiếm theo tên, tên tài khoản, email,..." aria-controls="dtBasicExample">
                    <button onclick="handleSearch()"
                        class="px-3 py-[10px] -translate-x-1 text-sm bg-cyan-500 hover:bg-cyan-600 rounded-r-md text-white">Tìm
                        kiếm</button>
                </div>
                {{#if (eq user.role "admin")}}
                <a href="/admin/account-management/add"
                    class="px-3 py-[6px] bg-cyan-500 rounded-md text-white hover:bg-cyan-600">Thêm nhân viên</a>
                {{/if}}
            </div>
        </div>
    </section>
    <section class="table__body mt-5">
        <table class="styled-table">
            <thead>
                <tr>
                    <th scope="col"></th>
                    <th scope="col">Họ tên</th>
                    <th scope="col">Tên tài khoản</th>
                    <th scope="col">Email</th>
                    <th scope="col">Quyền</th>
                    <th scope="col">Trạng thái</th>
                    <th scope="col">Hành động</th>
                </tr>
            </thead>
            <tbody>
                {{#each users}}
                <tr>
                    <th scope="row"></th>
                    <td>
                        <div onclick="handleNavigateToInfo('{{_id}}')"
                            class="font-medium text-blue-600 hover:text-cyan-600 hover:underline cursor-pointer">{{name}}</div>
                    </td>
                    <td>{{username}}</td>
                    <td>{{email}}</td>
                    <td class="uppercase">{{role}}</td>
                    <td>
                        <div class="uppercase text-center inline-block py-[6px] px-3 font-semibold {{#ifEquals 
                        status 'active'}}bg-green-200 rounded-lg border-2 border-green-600 text-green-600{{else}}
                            bg-red-200 rounded-lg border-2 border-red-600 text-red-600{{/ifEquals}}">{{status}}</div>
                    </td>
                    <td>
                        {{#ifEquals status "active"}}
                        <button
                            onclick="handleOpenModal({modalHead: 'Khóa tài khoản', modalBody: 'Bạn có chắc muốn khóa tài khoản <strong>{{name}}</strong>', btnLeft: 'Hủy', btnRight: 'Khóa'}, {id: '{{_id}}'} , handleLockAccount)"
                            type="button" class="bg-red-600 px-3 py-[6px] rounded-md text-white hover:bg-red-700">
                            Khóa tài khoản
                        </button>
                        {{/ifEquals}}

                        {{#ifEquals status "locked"}}
                        <button onclick="handleUnlockAccount('{{_id}}')" type="button"
                            class="bg-green-600 px-3 py-[6px] rounded-md text-white hover:bg-green-700">
                            Mở tài khoản
                        </button>
                        {{/ifEquals}}

                        {{#ifEquals status "pending"}}
                        <button onclick="sendMail(event,'{{_id}}', '{{email}}')" type="button"
                            class="py-[6px] px-3 rounded-md bg-yellow-500 text-white hover:bg-yellow-600">
                            Gửi xác thực
                        </button>
                        {{else}}
                        {{!-- <button type="button" disabled class="btn btn-outline-dark">Send mail</button> --}}
                        {{/ifEquals}}
                    </td>
                </tr>
                {{/each}}
            </tbody>
        </table>
    </section>

    <section class="mb-3">
        <div id="myPagination" class="flex justify-center items-center">
            <div class="flex">
                <div id="prevPage"
                    class="py-[6px] px-3 mr-1 border-[1px] border-white text-sm font-semibold text-black rounded-md cursor-pointer">
                    <i class="fas fa-angle-double-left"></i>
                </div>

                <!-- Page Numbers -->
                <!-- Use JavaScript to generate these dynamically -->

                <div id="pages" class="flex">

                </div>

                <div id="nextPage"
                    class="py-[6px] px-3 mr-1 border-[1px] border-white text-sm font-semibold text-black rounded-md cursor-pointer">
                    <i class="fas fa-angle-double-right"></i>
                </div>
            </div>
        </div>
    </section>
</div>

<div id="modal" class="relative z-10 hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="fixed inset-0 z-10 w-screen overflow-y-auto bg-gray-500 bg-opacity-75 transition-opacity">
        <div onclick="handleCloseModal(event)"
            class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <div onclick="handleNoClose(event)"
                class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                <div class="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div
                            class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                            <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                            </svg>
                        </div>
                        <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                            <h3 id="modal-head" class="text-base font-semibold leading-6 text-gray-900"
                                id="modal-title">Deactivate
                                account</h3>
                            <div class="mt-2">
                                <p id="modal-body" class="text-sm text-gray-500">Are you sure you want to deactivate
                                    your account? All
                                    of your data will be permanently removed. This action cannot be undone.</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                    <button id="btn-modal-right" type="button"
                        class="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:ml-3 sm:w-auto">Khóa</button>
                    <button id="btn-modal-left" onclick="handleCloseModal()" type="button"
                        class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">Hủy</button>
                </div>
            </div>
        </div>
    </div>
</div>


<script src="/js/modal/modal.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const totalPages = {{ pageTotal }}
        const currentPage = {{ pageNumber }}
    const pageSize = {{ pageSize }}

    const pagesElement = document.getElementById('pages');
    const prevPageButton = document.getElementById("prevPage");
    const nextPageButton = document.getElementById("nextPage");

    // Add click event listeners
    prevPageButton.addEventListener("click", function () {
        handlePageChange(currentPage > 1 ? currentPage - 1 : -1);
    });

    nextPageButton.addEventListener("click", function () {
        handlePageChange(currentPage < totalPages ? currentPage + 1 : -1);
    });

    // Move handlePageChange to the global scope
    window.handlePageChange = function (newPage) {
        if (newPage === -1) {
            return;
        }

        // Simulate onPageChange
        window.location.href = `/admin/account-management?pageNumber=${newPage}&pageSize=7`
        // Scroll to top
        //window.scrollTo({ top: 0, behavior: 'auto' });
    };

    function generatePageNumbers() {
        const pageNumbers = [];
        const limit = Math.min(totalPages, 12);

        // Calculate the starting page for the current set
        let startPage = Math.max(1, currentPage - Math.floor(limit / 2));

        // Adjust the starting page if it's too close to the end
        if (startPage + limit - 1 > totalPages) {
            startPage = totalPages - limit + 1;
        }

        for (let i = startPage; i < startPage + limit; i++) {
            pageNumbers.push(i);
        }

        return pageNumbers;
    };

    function renderPageNumbers() {
        const pages = generatePageNumbers().map(pageNumber => {
            return (`
                            <button onclick="handlePageChange(${pageNumber})" class="${currentPage === pageNumber ? 'bg-cyan-600 text-white' : " text-black hover:border-[1px] hover:border-gray-300"} py-[6px] px-3 mr-1 cursor-pointer border-[1px] border-white text-sm font-semibold rounded-md">
                                ${pageNumber}
                            </button>
                        `);
        }).join('');

        pagesElement.innerHTML = pages;

    }

    renderPageNumbers();
    pushBreadcrumb('Tài khoản', '#');
    popBreadcrumbUntil('Tài khoản');
        });
</script>

<script>
    const handleSearch = () => {
        const searchUserElement = document.querySelector('#search-user');
        let inputSearchValue = searchUserElement.value;
        if (inputSearchValue) {
            window.location.href = `/admin/account-management?searchKey=${inputSearchValue}`;
        }
        else {
            window.location.href = `/admin/account-management`;
        }
    }

    async function sendMail(event, _id, email) {
        const btn = event.target;
        btn.disabled = true;

        try {
            let res = await fetchSendMail({ _id, email });
            if (res.success === true) {
                startCountdown(btn);
            }
            else {
                showToast('danger', 'Gửi mail thất bại');
            }
        } catch (error) {
            console.log(error);
            btn.disabled = false;
        }
    }

    async function fetchSendMail(data) {
        const response = await fetch("http://localhost:8080/admin/account-management/send", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        });

        return response.json();
    }

    function startCountdown(btn) {
        let timeRemaining = 60;

        function updateCountdown() {
            btn.textContent = timeRemaining + 's';

            timeRemaining--;

            if (timeRemaining < 0) {
                afterCountdown();
            } else {
                setTimeout(updateCountdown, 1000);
            }
        }

        function afterCountdown() {
            btn.textContent = 'Gửi xác thực';
            btn.disabled = false;
            //window.location.reload();
        }

        updateCountdown();
    }



    const handleLockAccount = (data) => {

        fetch(`http://localhost:8080/admin/account-management/locked/${data.id}`, {
            method: "PUT"
        })
            .then(response => response.json())
            .then(data => {
                if (data.status === true) {
                    window.location.reload();
                }
                else {
                    showToast('danger', data.message);
                    handleCloseModal();
                }
            })
            .catch(e => console.log(e));
    }

    const handleUnlockAccount = (id) => {
        fetch(`http://localhost:8080/admin/account-management/unlocked/${id}`, {
            method: "PUT"
        })
            .then(response => response.json())
            .then(data => {
                if (data.status === true) {
                    window.location.reload();
                }
                else {
                    showToast('danger', data.message);
                }
            })
            .catch(e => showToast('danger', e));
    };

    const handleNavigateToInfo = (id) => {
        window.location.href = `/auth/info/${id}`;
    }
</script>